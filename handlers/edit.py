# handlers/edit.py
import re
from telebot import types
from db import get_user_session, update_habit, update_event

DAYS_OF_WEEK = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]

user_edit_states = {}

def register_edit_handlers(bot, _):
    @bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏")
    def start_edit(message):
        user_id = message.from_user.id
        session = get_user_session(user_id)
        habits = session.get("habits", [])
        events = session.get("events", [])

        if not habits and not events:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —â–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ üìù")
            bot.send_main_menu(message.chat.id)
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for habit in habits:
            markup.add(f"[–ó–≤–∏—á–∫–∞] {habit['name']}")
        for event in events:
            markup.add(f"[–ó–∞–≤–¥–∞–Ω–Ω—è] {event['name']}")
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, process_edit_selection)

    def process_edit_selection(message):
        user_id = message.from_user.id
        text = message.text.strip()

        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            bot.send_main_menu(message.chat.id)
            return

        if text.startswith("[–ó–≤–∏—á–∫–∞] "):
            name = text.replace("[–ó–≤–∏—á–∫–∞] ", "")
            user_edit_states[user_id] = {"type": "habit", "name": name}
        elif text.startswith("[–ó–∞–≤–¥–∞–Ω–Ω—è] "):
            name = text.replace("[–ó–∞–≤–¥–∞–Ω–Ω—è] ", "")
            user_edit_states[user_id] = {"type": "event", "name": name}
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä.")
            bot.send_main_menu(message.chat.id)
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–ù–∞–∑–≤–∞", "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        if user_edit_states[user_id]["type"] == "habit":
            markup.add("–î–Ω—ñ")
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

        bot.send_message(message.chat.id, "–©–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, process_edit_field)

    def process_edit_field(message):
        user_id = message.from_user.id
        choice = message.text.strip()

        if choice == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            bot.send_main_menu(message.chat.id)
            return

        if choice not in ["–ù–∞–∑–≤–∞", "–î–Ω—ñ", "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"]:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä.")
            bot.send_main_menu(message.chat.id)
            return

        user_edit_states[user_id]["field"] = choice

        if choice == "–ù–∞–∑–≤–∞":
            bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:")
            bot.register_next_step_handler(message, apply_edit)
        elif choice == "–î–Ω—ñ":
            user_edit_states[user_id]["days"] = []
            send_days_reply_keyboard(message.chat.id, user_id)
            bot.register_next_step_handler(message, handle_days_selection)
        elif choice == "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è":
            if user_edit_states[user_id]["type"] == "habit":
                bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–∞–±–æ '–ù—ñ' –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏):")
            else:
                bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î –ì–ì:–•–• (–∞–±–æ '–ù—ñ' –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏):")
            bot.register_next_step_handler(message, apply_edit)

    def send_days_reply_keyboard(chat_id, user_id):
        selected_days = user_edit_states[user_id].get("days", [])
        remaining_days = [d for d in DAYS_OF_WEEK if d not in selected_days]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for day in remaining_days:
            markup.add(day)
        if selected_days:
            markup.add("‚úÖ –ì–æ—Ç–æ–≤–æ")
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥–Ω—ñ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚úÖ –ì–æ—Ç–æ–≤–æ:", reply_markup=markup)

    def handle_days_selection(message):
        user_id = message.from_user.id
        state = user_edit_states.get(user_id)
        if not state or state.get("field") != "–î–Ω—ñ":
            bot.send_main_menu(message.chat.id)
            return

        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            bot.send_main_menu(message.chat.id)
            user_edit_states.pop(user_id, None)
            return

        if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            days = user_edit_states[user_id]["days"]
            if not days:
                bot.send_message(message.chat.id, "‚ùó –í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –¥–Ω—è. –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω.")
                send_days_reply_keyboard(message.chat.id, user_id)
                bot.register_next_step_handler(message, handle_days_selection)
                return
            update = {"days": days}
            update_habit(user_id, state["name"], update)
            bot.send_message(message.chat.id, "‚úÖ –î–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
            user_edit_states.pop(user_id, None)
            bot.send_main_menu(message.chat.id)
            return

        if message.text in DAYS_OF_WEEK:
            if message.text not in user_edit_states[user_id]["days"]:
                user_edit_states[user_id]["days"].append(message.text)

        send_days_reply_keyboard(message.chat.id, user_id)
        bot.register_next_step_handler(message, handle_days_selection)

    def apply_edit(message):
        user_id = message.from_user.id
        new_value = message.text.strip()
        edit_data = user_edit_states.get(user_id)

        if not edit_data:
            bot.send_main_menu(message.chat.id)
            return

        item_type = edit_data["type"]
        item_name = edit_data["name"]
        field = edit_data["field"]

        if field == "–ù–∞–∑–≤–∞":
            update = {"name": new_value}
        elif field == "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è":
            if new_value.lower() == "–Ω—ñ":
                reminder = None
            else:
                if item_type == "habit":
                    if not re.match(r'^\d{2}:\d{2}$', new_value):
                        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                        bot.register_next_step_handler(message, apply_edit)
                        return
                    reminder = new_value
                else:
                    try:
                        from datetime import datetime
                        reminder = datetime.strptime(new_value, "%Y-%m-%d %H:%M")
                    except ValueError:
                        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏/—á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                        bot.register_next_step_handler(message, apply_edit)
                        return
            update = {"reminder": reminder}

        if item_type == "habit":
            update_habit(user_id, item_name, update)
        else:
            update_event(user_id, item_name, update)

        bot.send_message(message.chat.id, "‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        user_edit_states.pop(user_id, None)
        bot.send_main_menu(message.chat.id)
